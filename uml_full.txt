@startuml
package ProjectLibrary <<Rectangle>>{
struct Point{
 Point x
 Point y
 unsigned int id
 double GeometricTol
 double GeometricTol_Squared
 ..
 Point(double x, double y, unsigned int id)
}
struct Edge{
 Point p1 
 Point p2
 unsigned int id
 double length
 ..
 Edge(Point p1,Point p2,unsigned int id)
 bool Includes(Point p)
 Point Medium(unsigned int id_p)
}
struct Triangle{
 array<Point, 3> points
 vector<Edge> edges
 unsigned int id
 double area
..
 Triangle(vector<Edge> edges,unsigned int id)
 bool Includes(Edge E)
 bool Includes(Point p)
 Point Opposite(Edge E)
 Edge Opposite(Point p)
 Edge MaxEdge()
 array<Point, 3> EdgesToPoints()
 Edge PointsToEdge(Point p1, Point p2)
}
class TriangularMesh{
 -bool ImportCell(const string cell)
 -void ExportCell(ostream& out)
 -void DivideTriangle()
 -void DivideRecursive(Triangle& T, Point p1, Edge& Split1, Point p1, Edge& Split2, Point& old_m)
 -void AdjacenceMatrix()
 -void InsertRow(const vector<unsigned int>& t, unsigned int id_edge=UINT_MAX)
 -void ModifyRow(unsigned int id_t_old, unsigned int id_t_new, unsigned int id_edge)
 -void AddCol(unsigned int id_tr, unsigned int id_edge)
 -bool Extract(Triangle& T)
 -bool Insert(Triangle& T)
 -unsigned int TopTheta()
..
 #unsigned int nPoints
 #vector<Point> points
 #unsigned int nEdges
 #vector<Edge> edges
 #unsigned int nTriangles
 #vector<Triangle> triangles
 #vector<vector<unsigned int>>adjacent 
 #vector<Triangle> top_theta
 #double theta
 #unsigned int n_theta
 #short int test
 #string level
 #string uniformity
--
 +TriangularMesh(const string cell0D,const string cell1D, const string cell2D, short int test) 
 +void Refining(double theta, string level="base", string uniformity="non-uniform")
 +void AddPoint(Point point,unsigned int indice=UINT_MAX)
 +void AddEdge(Edge edge, unsigned int indice=UINT_MAX)
 +void AddTriangle(Triangle triangle, unsigned int indice=UINT_MAX) 
 +void FindEdge(Point p1, Point p2)
 +void FindEdge(unsigned int id_e)
 +Point FindPoint(unsigned int id_p)
 +Triangle FindAdjacence(Triangle& T, Edge E)
 +void ExportMesh(vector<short int> cells={0}, string all="")
}
}
@enduml